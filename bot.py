import os
import datetime
import logging
import asyncio

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# ‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# ‚Äî –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ —á–∞—Ç–∞ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ["BOT_TOKEN"]
CHAT_ID = int(os.environ["CHAT_ID"])

# ‚Äî –í–∞—à–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –∑–æ–Ω—ã
people = ["–ì–µ–Ω–∞", "–†–æ–º–∞", "–ê–ª–∞–Ω"]
zones  = ["–í–∞–Ω–Ω–∞ –∏ —Ç—É–∞–ª–µ—Ç", "–ö—É—Ö–Ω—è", "–ö–æ—Ä–∏–¥–æ—Ä"]

# ‚Äî –û–ø–æ—Ä–Ω–∞—è –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–æ—Ç–∞—Ü–∏–∏ (–ø–æ—Å—Ç–∞–≤—å—Ç–µ —Ç—É, –∫–æ–≥–¥–∞ —É –≤–∞—Å —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª)
BASE_DATE = datetime.date(2025, 1, 1)

def get_schedule_for_today():
    """–°—á–∏—Ç–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –ø—Ä–æ—à–ª–æ —Å BASE_DATE, –∏ –≤—ã–¥–∞—ë—Ç —Ç–µ–∫—É—â—É—é —Ä–æ—Ç–∞—Ü–∏—é."""
    today = datetime.date.today()
    weeks_passed = (today - BASE_DATE).days // 7
    offset = weeks_passed % len(people)
    result = {}
    for i, zone in enumerate(zones):
        result[zone] = people[(i + offset) % len(people)]
    return result

def render_schedule_text():
    sched = get_schedule_for_today()
    lines = ["üßπ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–±–æ—Ä–∫–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é:",
             f"üìÖ –ù–µ–¥–µ–ª—è, —Å—Ç–∞—Ä—Ç–æ–≤–∞–≤—à–∞—è {BASE_DATE.strftime('%d.%m.%Y')}"]
    for zone, person in sched.items():
        lines.append(f"‚ñ™ {zone}: {person}")
    return "\n".join(lines)

# ‚Äî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule
async def schedule_command(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(render_schedule_text())

# ‚Äî –ê–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 09:00)
async def send_weekly(app):
    await app.bot.send_message(chat_id=CHAT_ID, text=render_schedule_text())

async def main():
    # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("schedule", schedule_command))

    # –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        send_weekly,
        trigger="cron",
        day_of_week="mon",
        hour=9,
        minute=0,
        args=[app],
    )
    scheduler.start()

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –∂–¥—É –∫–æ–º–∞–Ω–¥—É /schedule –∏–ª–∏ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 09:00")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())

